# Python stubs generated by omniidl from idl/inf1822.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "INF1822"
#
__name__ = "INF1822"
_0_INF1822 = omniORB.openModule("INF1822", r"idl/inf1822.idl")
_0_INF1822__POA = omniORB.openModule("INF1822__POA", r"idl/inf1822.idl")


# interface Device
_0_INF1822._d_Device = (omniORB.tcInternal.tv_objref, "IDL:INF1822/Device:1.0", "Device")
omniORB.typeMapping["IDL:INF1822/Device:1.0"] = _0_INF1822._d_Device
_0_INF1822.Device = omniORB.newEmptyClass()
class Device :
    _NP_RepositoryId = _0_INF1822._d_Device[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_INF1822.Device = Device
_0_INF1822._tc_Device = omniORB.tcInternal.createTypeCode(_0_INF1822._d_Device)
omniORB.registerType(Device._NP_RepositoryId, _0_INF1822._d_Device, _0_INF1822._tc_Device)

# Device operations and attributes
Device._d__get_id = ((),(omniORB.tcInternal.tv_ulong,),None)
Device._d__set_id = ((omniORB.tcInternal.tv_ulong,),(),None)
Device._d__get_type = ((),((omniORB.tcInternal.tv_string,0),),None)
Device._d__set_type = (((omniORB.tcInternal.tv_string,0),),(),None)

# Device object reference
class _objref_Device (CORBA.Object):
    _NP_RepositoryId = Device._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def _get_id(self, *args):
        return self._obj.invoke("_get_id", _0_INF1822.Device._d__get_id, args)

    def _set_id(self, *args):
        return self._obj.invoke("_set_id", _0_INF1822.Device._d__set_id, args)

    id = property(_get_id, _set_id)


    def _get_type(self, *args):
        return self._obj.invoke("_get_type", _0_INF1822.Device._d__get_type, args)

    def _set_type(self, *args):
        return self._obj.invoke("_set_type", _0_INF1822.Device._d__set_type, args)

    type = property(_get_type, _set_type)


omniORB.registerObjref(Device._NP_RepositoryId, _objref_Device)
_0_INF1822._objref_Device = _objref_Device
del Device, _objref_Device

# Device skeleton
__name__ = "INF1822__POA"
class Device (PortableServer.Servant):
    _NP_RepositoryId = _0_INF1822.Device._NP_RepositoryId


    _omni_op_d = {"_get_id": _0_INF1822.Device._d__get_id, "_set_id": _0_INF1822.Device._d__set_id, "_get_type": _0_INF1822.Device._d__get_type, "_set_type": _0_INF1822.Device._d__set_type}

Device._omni_skeleton = Device
_0_INF1822__POA.Device = Device
omniORB.registerSkeleton(Device._NP_RepositoryId, Device)
del Device
__name__ = "INF1822"

# interface LightDevice
_0_INF1822._d_LightDevice = (omniORB.tcInternal.tv_objref, "IDL:INF1822/LightDevice:1.0", "LightDevice")
omniORB.typeMapping["IDL:INF1822/LightDevice:1.0"] = _0_INF1822._d_LightDevice
_0_INF1822.LightDevice = omniORB.newEmptyClass()
class LightDevice (_0_INF1822.Device):
    _NP_RepositoryId = _0_INF1822._d_LightDevice[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_INF1822.LightDevice = LightDevice
_0_INF1822._tc_LightDevice = omniORB.tcInternal.createTypeCode(_0_INF1822._d_LightDevice)
omniORB.registerType(LightDevice._NP_RepositoryId, _0_INF1822._d_LightDevice, _0_INF1822._tc_LightDevice)

# LightDevice operations and attributes
LightDevice._d__get_lightLevel = ((),(omniORB.tcInternal.tv_long,),None)
LightDevice._d__set_lightLevel = ((omniORB.tcInternal.tv_long,),(),None)

# LightDevice object reference
class _objref_LightDevice (_0_INF1822._objref_Device):
    _NP_RepositoryId = LightDevice._NP_RepositoryId

    def __init__(self, obj):
        _0_INF1822._objref_Device.__init__(self, obj)

    def _get_lightLevel(self, *args):
        return self._obj.invoke("_get_lightLevel", _0_INF1822.LightDevice._d__get_lightLevel, args)

    def _set_lightLevel(self, *args):
        return self._obj.invoke("_set_lightLevel", _0_INF1822.LightDevice._d__set_lightLevel, args)

    lightLevel = property(_get_lightLevel, _set_lightLevel)


omniORB.registerObjref(LightDevice._NP_RepositoryId, _objref_LightDevice)
_0_INF1822._objref_LightDevice = _objref_LightDevice
del LightDevice, _objref_LightDevice

# LightDevice skeleton
__name__ = "INF1822__POA"
class LightDevice (_0_INF1822__POA.Device):
    _NP_RepositoryId = _0_INF1822.LightDevice._NP_RepositoryId


    _omni_op_d = {"_get_lightLevel": _0_INF1822.LightDevice._d__get_lightLevel, "_set_lightLevel": _0_INF1822.LightDevice._d__set_lightLevel}
    _omni_op_d.update(_0_INF1822__POA.Device._omni_op_d)

LightDevice._omni_skeleton = LightDevice
_0_INF1822__POA.LightDevice = LightDevice
omniORB.registerSkeleton(LightDevice._NP_RepositoryId, LightDevice)
del LightDevice
__name__ = "INF1822"

# interface MasterLightDevice
_0_INF1822._d_MasterLightDevice = (omniORB.tcInternal.tv_objref, "IDL:INF1822/MasterLightDevice:1.0", "MasterLightDevice")
omniORB.typeMapping["IDL:INF1822/MasterLightDevice:1.0"] = _0_INF1822._d_MasterLightDevice
_0_INF1822.MasterLightDevice = omniORB.newEmptyClass()
class MasterLightDevice (_0_INF1822.LightDevice):
    _NP_RepositoryId = _0_INF1822._d_MasterLightDevice[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_INF1822.MasterLightDevice = MasterLightDevice
_0_INF1822._tc_MasterLightDevice = omniORB.tcInternal.createTypeCode(_0_INF1822._d_MasterLightDevice)
omniORB.registerType(MasterLightDevice._NP_RepositoryId, _0_INF1822._d_MasterLightDevice, _0_INF1822._tc_MasterLightDevice)

# MasterLightDevice operations and attributes
MasterLightDevice._d_startMonitoringDevice = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), None)

# MasterLightDevice object reference
class _objref_MasterLightDevice (_0_INF1822._objref_LightDevice):
    _NP_RepositoryId = MasterLightDevice._NP_RepositoryId

    def __init__(self, obj):
        _0_INF1822._objref_LightDevice.__init__(self, obj)

    def startMonitoringDevice(self, *args):
        return self._obj.invoke("startMonitoringDevice", _0_INF1822.MasterLightDevice._d_startMonitoringDevice, args)

omniORB.registerObjref(MasterLightDevice._NP_RepositoryId, _objref_MasterLightDevice)
_0_INF1822._objref_MasterLightDevice = _objref_MasterLightDevice
del MasterLightDevice, _objref_MasterLightDevice

# MasterLightDevice skeleton
__name__ = "INF1822__POA"
class MasterLightDevice (_0_INF1822__POA.LightDevice):
    _NP_RepositoryId = _0_INF1822.MasterLightDevice._NP_RepositoryId


    _omni_op_d = {"startMonitoringDevice": _0_INF1822.MasterLightDevice._d_startMonitoringDevice}
    _omni_op_d.update(_0_INF1822__POA.LightDevice._omni_op_d)

MasterLightDevice._omni_skeleton = MasterLightDevice
_0_INF1822__POA.MasterLightDevice = MasterLightDevice
omniORB.registerSkeleton(MasterLightDevice._NP_RepositoryId, MasterLightDevice)
del MasterLightDevice
__name__ = "INF1822"

# enum ObjectType
_0_INF1822.MasterLightDeviceType = omniORB.EnumItem("MasterLightDeviceType", 0)
_0_INF1822.LightDeviceType = omniORB.EnumItem("LightDeviceType", 1)
_0_INF1822.ObjectType = omniORB.Enum("IDL:INF1822/ObjectType:1.0", (_0_INF1822.MasterLightDeviceType, _0_INF1822.LightDeviceType,))

_0_INF1822._d_ObjectType  = (omniORB.tcInternal.tv_enum, _0_INF1822.ObjectType._NP_RepositoryId, "ObjectType", _0_INF1822.ObjectType._items)
_0_INF1822._tc_ObjectType = omniORB.tcInternal.createTypeCode(_0_INF1822._d_ObjectType)
omniORB.registerType(_0_INF1822.ObjectType._NP_RepositoryId, _0_INF1822._d_ObjectType, _0_INF1822._tc_ObjectType)

#
# End of module "INF1822"
#
__name__ = "inf1822_idl"


#
# Start of module "NamingService"
#
__name__ = "NamingService"
_0_NamingService = omniORB.openModule("NamingService", r"idl/inf1822.idl")
_0_NamingService__POA = omniORB.openModule("NamingService__POA", r"idl/inf1822.idl")


# typedef ... IORList
class IORList:
    _NP_RepositoryId = "IDL:NamingService/IORList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_NamingService.IORList = IORList
_0_NamingService._d_IORList  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0)
_0_NamingService._ad_IORList = (omniORB.tcInternal.tv_alias, IORList._NP_RepositoryId, "IORList", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0_NamingService._tc_IORList = omniORB.tcInternal.createTypeCode(_0_NamingService._ad_IORList)
omniORB.registerType(IORList._NP_RepositoryId, _0_NamingService._ad_IORList, _0_NamingService._tc_IORList)
del IORList

# interface ObjectManager
_0_NamingService._d_ObjectManager = (omniORB.tcInternal.tv_objref, "IDL:NamingService/ObjectManager:1.0", "ObjectManager")
omniORB.typeMapping["IDL:NamingService/ObjectManager:1.0"] = _0_NamingService._d_ObjectManager
_0_NamingService.ObjectManager = omniORB.newEmptyClass()
class ObjectManager :
    _NP_RepositoryId = _0_NamingService._d_ObjectManager[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_NamingService.ObjectManager = ObjectManager
_0_NamingService._tc_ObjectManager = omniORB.tcInternal.createTypeCode(_0_NamingService._d_ObjectManager)
omniORB.registerType(ObjectManager._NP_RepositoryId, _0_NamingService._d_ObjectManager, _0_NamingService._tc_ObjectManager)

# ObjectManager operations and attributes
ObjectManager._d_register = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.tcInternal.tv_boolean, ), None)
ObjectManager._d_deregister = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.tcInternal.tv_boolean, ), None)
ObjectManager._d_getByName = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
ObjectManager._d_getByType = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:NamingService/IORList:1.0"], ), None)
ObjectManager._d_getMasterForType = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)

# ObjectManager object reference
class _objref_ObjectManager (CORBA.Object):
    _NP_RepositoryId = ObjectManager._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def register(self, *args):
        return self._obj.invoke("register", _0_NamingService.ObjectManager._d_register, args)

    def deregister(self, *args):
        return self._obj.invoke("deregister", _0_NamingService.ObjectManager._d_deregister, args)

    def getByName(self, *args):
        return self._obj.invoke("getByName", _0_NamingService.ObjectManager._d_getByName, args)

    def getByType(self, *args):
        return self._obj.invoke("getByType", _0_NamingService.ObjectManager._d_getByType, args)

    def getMasterForType(self, *args):
        return self._obj.invoke("getMasterForType", _0_NamingService.ObjectManager._d_getMasterForType, args)

omniORB.registerObjref(ObjectManager._NP_RepositoryId, _objref_ObjectManager)
_0_NamingService._objref_ObjectManager = _objref_ObjectManager
del ObjectManager, _objref_ObjectManager

# ObjectManager skeleton
__name__ = "NamingService__POA"
class ObjectManager (PortableServer.Servant):
    _NP_RepositoryId = _0_NamingService.ObjectManager._NP_RepositoryId


    _omni_op_d = {"register": _0_NamingService.ObjectManager._d_register, "deregister": _0_NamingService.ObjectManager._d_deregister, "getByName": _0_NamingService.ObjectManager._d_getByName, "getByType": _0_NamingService.ObjectManager._d_getByType, "getMasterForType": _0_NamingService.ObjectManager._d_getMasterForType}

ObjectManager._omni_skeleton = ObjectManager
_0_NamingService__POA.ObjectManager = ObjectManager
omniORB.registerSkeleton(ObjectManager._NP_RepositoryId, ObjectManager)
del ObjectManager
__name__ = "NamingService"

#
# End of module "NamingService"
#
__name__ = "inf1822_idl"

_exported_modules = ( "INF1822", "NamingService")

# The end.
